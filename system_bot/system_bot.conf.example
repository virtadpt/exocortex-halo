# Top level configuration for System Bot.
[DEFAULT]

# URL of the message queue to poll.
queue = http://localhost:8003/

# Name the bot should answer to.  I suggest using the hostname the bot's
# running on.
bot_name = HostnameOfThisBox

# Set the default loglevel of the bot.
loglevel = info

# How often to poll the message queue for orders.  Defaults to 10 seconds.
# polling_time = 10

# How often to send warning messages to the user, in seconds.  Nobody likes to
# be flooded with alerts when, say, the daily system backup runs, so this is
# tweakable.  Set to 0 to disable.
time_between_alerts = 3600

# Percentage of disk space in use to consider critical.
disk_usage = 90.0

# Percentage of memory remaining to consider critical.
memory_remaining = 15.0

# Number of standard deviations to consider hazardous to the system.  Note that
# This does not need to be a big number.  If you want to change this value,
# please read up on how standard deviations work first.
standard_deviations = 2

# Minimum and maximum lengths of the stat queues for system monitoring.
minimum_length = 2
maximum_length = 100

# URL to hit for public IP address of this system.  Whatever URL you put here
# must return ONLY a IP address as text - no HTML, JSON, or anything like
# that.
ip_addr_site = https://api.ipify.org/

# If you have any processes that you want to monitor the health of, list them
# here.  The part before the comma is the literal string that system_bot.py
# will scan the process table for to determine liveliness or not.  The latter
# part after the comma is the exact command line that system_bot.py will
# execute to try to restart it.  Please remember that you may need to specify
# full paths to configuration files or other such things for this feature to
# work.  I suggest experimenting a little before going fully into production
# because the process checking code is fairly specific.
#[processes to monitor]
#process1 = test_bot.py --loglevel,python2 /home/user/exocortex-halo/test_bot/test_bot.py --loglevel debug
#process2 = test_bot.py --name AnotherTestBot,python2 /home/user/exocortex-halo/test_bot/test_bot.py --name AnotherTestBot

# If there are any file systems that you want to ignore, like Ubuntu's /snap
# mounts, list them here.  The intended use case is, you can ignore always
# mounted read-only file systems that are always at 100% of capacity without
# getting paged every hour or so.
#[file systems to ignore]
# mount1 = /snap
# mount2 = /foo/bar

# Due to the fact that most OpenWRT devices are resource constrained devices
# and it's often impractical to do a full install of Halo to them,
#[openwrt]
#openwrt_host = 192.168.1.1
#openwrt_port = 10000
